// Code generated by Kitex v0.9.1. DO NOT EDIT.

package videoservice

import (
	videos "HuaTug.com/kitex_gen/videos"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"FeedService": kitex.NewMethodInfo(
		feedServiceHandler,
		newVideoServiceFeedServiceArgs,
		newVideoServiceFeedServiceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoFeedList": kitex.NewMethodInfo(
		videoFeedListHandler,
		newVideoServiceVideoFeedListArgs,
		newVideoServiceVideoFeedListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoSearch": kitex.NewMethodInfo(
		videoSearchHandler,
		newVideoServiceVideoSearchArgs,
		newVideoServiceVideoSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPopular": kitex.NewMethodInfo(
		videoPopularHandler,
		newVideoServiceVideoPopularArgs,
		newVideoServiceVideoPopularResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoServiceServiceInfo                = NewServiceInfo()
	videoServiceServiceInfoForClient       = NewServiceInfoForClient()
	videoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videos.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "videos",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func feedServiceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceFeedServiceArgs)
	realResult := result.(*videos.VideoServiceFeedServiceResult)
	success, err := handler.(videos.VideoService).FeedService(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedServiceArgs() interface{} {
	return videos.NewVideoServiceFeedServiceArgs()
}

func newVideoServiceFeedServiceResult() interface{} {
	return videos.NewVideoServiceFeedServiceResult()
}

func videoFeedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoFeedListArgs)
	realResult := result.(*videos.VideoServiceVideoFeedListResult)
	success, err := handler.(videos.VideoService).VideoFeedList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoFeedListArgs() interface{} {
	return videos.NewVideoServiceVideoFeedListArgs()
}

func newVideoServiceVideoFeedListResult() interface{} {
	return videos.NewVideoServiceVideoFeedListResult()
}

func videoSearchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoSearchArgs)
	realResult := result.(*videos.VideoServiceVideoSearchResult)
	success, err := handler.(videos.VideoService).VideoSearch(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoSearchArgs() interface{} {
	return videos.NewVideoServiceVideoSearchArgs()
}

func newVideoServiceVideoSearchResult() interface{} {
	return videos.NewVideoServiceVideoSearchResult()
}

func videoPopularHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoPopularArgs)
	realResult := result.(*videos.VideoServiceVideoPopularResult)
	success, err := handler.(videos.VideoService).VideoPopular(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPopularArgs() interface{} {
	return videos.NewVideoServiceVideoPopularArgs()
}

func newVideoServiceVideoPopularResult() interface{} {
	return videos.NewVideoServiceVideoPopularResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FeedService(ctx context.Context, req *videos.FeedServiceRequest) (r *videos.FeedServiceResponse, err error) {
	var _args videos.VideoServiceFeedServiceArgs
	_args.Req = req
	var _result videos.VideoServiceFeedServiceResult
	if err = p.c.Call(ctx, "FeedService", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoFeedList(ctx context.Context, req *videos.VideoFeedListRequest) (r *videos.VideoFeedListResponse, err error) {
	var _args videos.VideoServiceVideoFeedListArgs
	_args.Req = req
	var _result videos.VideoServiceVideoFeedListResult
	if err = p.c.Call(ctx, "VideoFeedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoSearch(ctx context.Context, req *videos.VideoSearchRequest) (r *videos.VideoSearchResponse, err error) {
	var _args videos.VideoServiceVideoSearchArgs
	_args.Req = req
	var _result videos.VideoServiceVideoSearchResult
	if err = p.c.Call(ctx, "VideoSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPopular(ctx context.Context, req *videos.VideoPopularRequest) (r *videos.VideoPopularResponse, err error) {
	var _args videos.VideoServiceVideoPopularArgs
	_args.Req = req
	var _result videos.VideoServiceVideoPopularResult
	if err = p.c.Call(ctx, "VideoPopular", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
