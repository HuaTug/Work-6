// Code generated by Kitex v0.9.1. DO NOT EDIT.

package userservice

import (
	users "HuaTug.com/kitex_gen/users"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"UpdateUser": kitex.NewMethodInfo(
		updateUserHandler,
		newUserServiceUpdateUserArgs,
		newUserServiceUpdateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteUser": kitex.NewMethodInfo(
		deleteUserHandler,
		newUserServiceDeleteUserArgs,
		newUserServiceDeleteUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryUser": kitex.NewMethodInfo(
		queryUserHandler,
		newUserServiceQueryUserArgs,
		newUserServiceQueryUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateUser": kitex.NewMethodInfo(
		createUserHandler,
		newUserServiceCreateUserArgs,
		newUserServiceCreateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LoginUser": kitex.NewMethodInfo(
		loginUserHandler,
		newUserServiceLoginUserArgs,
		newUserServiceLoginUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newUserServiceGetUserInfoArgs,
		newUserServiceGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*users.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "users",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UserServiceUpdateUserArgs)
	realResult := result.(*users.UserServiceUpdateUserResult)
	success, err := handler.(users.UserService).UpdateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUpdateUserArgs() interface{} {
	return users.NewUserServiceUpdateUserArgs()
}

func newUserServiceUpdateUserResult() interface{} {
	return users.NewUserServiceUpdateUserResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UserServiceDeleteUserArgs)
	realResult := result.(*users.UserServiceDeleteUserResult)
	success, err := handler.(users.UserService).DeleteUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceDeleteUserArgs() interface{} {
	return users.NewUserServiceDeleteUserArgs()
}

func newUserServiceDeleteUserResult() interface{} {
	return users.NewUserServiceDeleteUserResult()
}

func queryUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UserServiceQueryUserArgs)
	realResult := result.(*users.UserServiceQueryUserResult)
	success, err := handler.(users.UserService).QueryUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceQueryUserArgs() interface{} {
	return users.NewUserServiceQueryUserArgs()
}

func newUserServiceQueryUserResult() interface{} {
	return users.NewUserServiceQueryUserResult()
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UserServiceCreateUserArgs)
	realResult := result.(*users.UserServiceCreateUserResult)
	success, err := handler.(users.UserService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateUserArgs() interface{} {
	return users.NewUserServiceCreateUserArgs()
}

func newUserServiceCreateUserResult() interface{} {
	return users.NewUserServiceCreateUserResult()
}

func loginUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UserServiceLoginUserArgs)
	realResult := result.(*users.UserServiceLoginUserResult)
	success, err := handler.(users.UserService).LoginUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginUserArgs() interface{} {
	return users.NewUserServiceLoginUserArgs()
}

func newUserServiceLoginUserResult() interface{} {
	return users.NewUserServiceLoginUserResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UserServiceGetUserInfoArgs)
	realResult := result.(*users.UserServiceGetUserInfoResult)
	success, err := handler.(users.UserService).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserInfoArgs() interface{} {
	return users.NewUserServiceGetUserInfoArgs()
}

func newUserServiceGetUserInfoResult() interface{} {
	return users.NewUserServiceGetUserInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UpdateUser(ctx context.Context, req *users.UpdateUserRequest) (r *users.UpdateUserResponse, err error) {
	var _args users.UserServiceUpdateUserArgs
	_args.Req = req
	var _result users.UserServiceUpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, req *users.DeleteUserRequest) (r *users.DeleteUserResponse, err error) {
	var _args users.UserServiceDeleteUserArgs
	_args.Req = req
	var _result users.UserServiceDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUser(ctx context.Context, req *users.QueryUserRequest) (r *users.QueryUserResponse, err error) {
	var _args users.UserServiceQueryUserArgs
	_args.Req = req
	var _result users.UserServiceQueryUserResult
	if err = p.c.Call(ctx, "QueryUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, req *users.CreateUserRequest) (r *users.CreateUserResponse, err error) {
	var _args users.UserServiceCreateUserArgs
	_args.Req = req
	var _result users.UserServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginUser(ctx context.Context, req *users.LoginUserResquest) (r *users.LoginUserResponse, err error) {
	var _args users.UserServiceLoginUserArgs
	_args.Req = req
	var _result users.UserServiceLoginUserResult
	if err = p.c.Call(ctx, "LoginUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, req *users.GetUserInfoRequest) (r *users.GetUserInfoResponse, err error) {
	var _args users.UserServiceGetUserInfoArgs
	_args.Req = req
	var _result users.UserServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
